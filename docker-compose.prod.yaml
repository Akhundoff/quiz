services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: quiz_mysql_prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "127.0.0.1:${DB_PORT}:3306"
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    networks:
      - quiz_prod_network
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=512M
      --max-connections=200
      --query-cache-type=1
      --query-cache-size=64M
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long-query-time=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend API (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: quiz_backend_prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${PROTOCOL}://${DOMAIN_NAME}
      BACKEND_URL: ${PROTOCOL}://${DOMAIN_NAME}
      CORS_ORIGINS: ${PROTOCOL}://${DOMAIN_NAME},${PROTOCOL}://www.${DOMAIN_NAME}
      DOMAIN_NAME: ${DOMAIN_NAME}
      PROTOCOL: ${PROTOCOL}
    ports:
      - "127.0.0.1:3001:3001"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./logs/backend:/app/logs
    networks:
      - quiz_prod_network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/quiz/questions"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: quiz_frontend_prod
    restart: always
    environment:
      REACT_APP_API_URL: ${PROTOCOL}://${DOMAIN_NAME}/api
      REACT_APP_BACKEND_URL: ${PROTOCOL}://${DOMAIN_NAME}
      REACT_APP_FRONTEND_URL: ${PROTOCOL}://${DOMAIN_NAME}
      REACT_APP_DOMAIN: ${DOMAIN_NAME}
      REACT_APP_PROTOCOL: ${PROTOCOL}
    ports:
      - "127.0.0.1:3000:80"
    networks:
      - quiz_prod_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5.2
    container_name: quiz_phpmyadmin_prod
    restart: always
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: ${DB_USERNAME}
      PMA_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      PMA_ABSOLUTE_URI: ${PROTOCOL}://${DOMAIN_NAME}/phpmyadmin/
      UPLOAD_LIMIT: 100M
      MEMORY_LIMIT: 512M
    ports:
      - "127.0.0.1:8082:80"
    networks:
      - quiz_prod_network
    depends_on:
      mysql:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy (Production üçün əlavə)
  nginx-proxy:
    image: nginx:alpine
    container_name: quiz_nginx_prod
    restart: always
    ports:
      - "127.0.0.1:8080:80"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - quiz_prod_network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_prod_data:
    driver: local

networks:
  quiz_prod_network:
    driver: bridge